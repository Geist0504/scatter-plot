{"version":3,"sources":["plot.js","App.js","serviceWorker.js","index.js"],"names":["ScatterPlot","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createPlot","bind","assertThisInitialized","width","size","height","node","data","timeFormat","d3","console","log","yScale","range","map","d","parsedTime","Time","split","Date","UTC","domain","yAxis","tickFormat","append","attr","xMin","Year","xMax","xScale","xAxis","modal","style","selectAll","enter","exit","remove","i","toISOString","on","transition","duration","html","Name","Nationality","Doping","pageX","pageY","_this2","react_default","a","createElement","ref","Component","App","state","fetch","response","json","setState","className","id","plot","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.074e69b3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as d3 from \"d3\";\n\n\n// Lessons:\n// \t1. If working with Dates or times, use Date objects\n// \t2. Plan data structures in advance\n// \t3. If cleaning up object and you won't need the original, just convert the values vs creating multiple objects\n\nclass ScatterPlot extends Component {\n   constructor(props){\n      super(props)\n      this.createPlot = this.createPlot.bind(this)\n   }\n   componentDidMount(){\n   \t\tthis.createPlot()\n   }\n   componentDidUpdate(){\n   \t\tthis.createPlot()\n   }\n   createPlot(){\n   \tconst width = this.props.size[0]\n   \tvar margin = {\n\t    top: 100,\n\t    right: 20,\n\t    bottom: 30,\n\t    left: 60\n\t  }\n\n   \tconst height= this.props.size[1]\n   \tconst node = this.node\n   \tconst data = this.props.data\n   \tconst leftPadding = 50\n   \tconst topPadding = 50\n   \tconst timeFormat = d3.timeFormat(\"%M:%S\");\n   \tconsole.log(data)\n   \tconst yScale =d3.scaleTime().range([0, height]);\n   \tif(data[0]){\n   \t\tdata.map((d) => {\n   \t\t\tlet parsedTime = d.Time.split(':')\n   \t\t\td.Time = new Date(Date.UTC(1970, 0, 1, 0, parsedTime[0], parsedTime[1]))\n   \t\t})\n   \t\tyScale.domain(d3.extent(data,(d) => d.Time ))\n   \t\tconst yAxis = d3.axisLeft(yScale).tickFormat(timeFormat)\n   \t\td3.select(node).append(\"g\").attr(\"transform\", \"translate(\"+leftPadding+\")\")\n    .attr(\"id\", \"y-axis\").call(yAxis);\n    \tconst xMin = d3.min(data, (d) => d.Year)\n   \t\tconst xMax = d3.max(data, (d) => d.Year)\n   \t\tconst xScale = d3.scaleLinear().domain([xMin-1, xMax+1])\n                     .range([leftPadding, width]);\n        const xAxis = d3.axisBottom(xScale).tickFormat(d3.format(\"d\"));\n        d3.select(node).append(\"g\").attr(\"transform\", \"translate(0, \"+ height + \")\")\n    .attr(\"id\", \"x-axis\").call(xAxis);\n\n    let modal = d3.select(\"body\").append(\"div\")\n\t\t.attr(\"class\", \"tooltip\")\n\t\t.attr(\"id\", \"tooltip\")\n\t\t.style(\"opacity\",0)\n\n    d3.select(node)\n      .selectAll('circle')\n      .data(this.props.data)\n      .enter()\n      .append('circle')\n   \n   d3.select(node)\n      .selectAll('circle')\n      .data(this.props.data)\n      .exit()\n      .remove()\n\n   d3.select(node)\n      .selectAll('circle')\n      .data(data)\n      .style('fill', '#228b22') //TODO: Need to make this conditional\n      .attr('cx', (d) => xScale(d.Year))\n      .attr('cy', (d, i) => yScale(d.Time))\n      .attr('r', 6)\n      .attr('stroke', 'black')\n      .attr('class', 'dot')\n      .attr('data-xvalue', (d) => d.Year)\n      .attr('data-yvalue', (d) => d.Time.toISOString())\n      .on('mouseover', function(d) {\n      \tmodal.transition().duration(200).style('opacity', .9)\n        modal.attr(\"data-year\", d.Year)\n        modal.html(d.Name + \": \"+ d.Nationality + \"<br>\"\n           \t+ \"Year: \" + d.Year+\", Time: \"+d.Time\n           \t+ (d.Doping?\"<br><br>\" +d.Doping:\"\"))\n        .style(\"left\", (d3.event.pageX) +\"px\")\n        .style(\"top\", (d3.event.pageY+20)+\"px\")\n      })\n      .on('mouseout', function(d){\n      \tmodal.transition().duration(200).style('opacity', 0)\n      })\n   \t}\n   }\n   render(){\n   \treturn(\n   \t\t<svg ref={node => this.node = node}\n   \t\twidth={900} height={600}></svg>\n   \t)\n   }\n}\n\n// div.html(d.Name + \": \" + d.Nationality + \"<br/>\"\n//               + \"Year: \" +  d.Year + \", Time: \" + timeFormat(d.Time) \n//               + (d.Doping?\"<br/><br/>\" + d.Doping:\"\"))\n//         .style(\"left\", (d3.event.pageX) + \"px\")\n//         .style(\"top\", (d3.event.pageY - 28) + \"px\");\n//     })\n\nexport default ScatterPlot","import React, { Component } from 'react';\nimport './App.css';\nimport ScatterPlot from './plot'\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {data: []}\n  }\n  async componentDidMount(){\n    const response = await fetch('https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json');\n    const json = await response.json()\n    this.setState({data: json})\n   }\n  render() {\n    return (\n      <div className=\"App\">\n       <div className='container'>\n          <div id='title'>Doping in Professional Bicycle Racing</div>\n          <div className='visHolder'>\n            <ScatterPlot data={this.state.data} size={[800,500]}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}